CREATE TABLE M_ACTIVEMQ_BROKER 
(
  ID VARCHAR2(32) NOT NULL 
, CONFIG_ID VARCHAR2(32) 
, BROKER_ID VARCHAR2(100) 
, BROKER_NAME VARCHAR2(100) 
, BROKER_VERSION VARCHAR2(64) 
, UPTIME DECIMAL(12,2) 
, TOTAL_ENQUEUE DECIMAL(10,2) 
, TOTAL_DEQUEUE DECIMAL(10,2) 
, TOTAL_PRODUCER DECIMAL(10,2) 
, TOTAL_CONSUMER DECIMAL(10,2) 
, TOTAL_MESSAGE DECIMAL(10,2) 
, MEMORY_LIMIT DECIMAL(15,2) 
, MEMORY_PERCENT_USAGE DECIMAL(15,2) 
, STORE_LIMIT DECIMAL(15,2) 
, STORE_PERCENT_USAGE DECIMAL(15,2) 
, TEMP_LIMIT DECIMAL(15,2) 
, TEMP_PERCENT_USAGE DECIMAL(15,2) 
, LOG_DATE TIMESTAMP 
, CONSTRAINT M_ACTIVEMQ_BROKER_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);


CREATE TABLE M_ACTIVEMQ_BROKER_QUEUE 
(
  ID VARCHAR2(32) NOT NULL 
, BROKER_INFO_ID VARCHAR2(32) 
, QUEUE_NAME VARCHAR2(100) 
, PENDING_MESSAGE_NUM DECIMAL(10,2) 
, CONSUMER_NUM DECIMAL(10,2) 
, MESSAGEE_NQUEUED_NUM DECIMAL(10,2) 
, MESSAGE_DEQUEUED_NUM DECIMAL(10,2) 
, CONSTRAINT M_ACTIVEMQ_BROKER_QUEUE_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);


CREATE TABLE M_ACTIVEMQ_CONFIG_JMX 
(
  ID VARCHAR2(32) NOT NULL 
, HOST_IP VARCHAR2(50) 
, PORT VARCHAR2(20) 
, APP_NAME VARCHAR2(50) 
, JMX_DOMAIN VARCHAR2(100) 
, BROKER_NAME VARCHAR2(20) 
, CONSTRAINT M_ACTIVEMQ_CONFIG_JMX_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);
ALTER TABLE M_ACTIVEMQ_CONFIG_JMX 
ADD (STATUS INT );


CREATE TABLE M_ACTIVEMQ_MONITOR_CONF 
(
  ID VARCHAR2(32) NOT NULL 
, BROKER_ID VARCHAR2(32) 
, MONITOR_TYPE VARCHAR2(50) 
, MONITOR_CONF VARCHAR2(1000) 
, CONSTRAINT M_ACTIVEMQ_MONITOR_CONF_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

COMMENT ON COLUMN M_ACTIVEMQ_MONITOR_CONF.BROKER_ID IS 'M_ACTIVEMQ_BROKER.ID';

COMMENT ON COLUMN M_ACTIVEMQ_MONITOR_CONF.MONITOR_TYPE IS '监控类型';

COMMENT ON COLUMN M_ACTIVEMQ_MONITOR_CONF.MONITOR_CONF IS '监控参数json串';

ALTER TABLE M_ACTIVEMQ_MONITOR_CONF 
ADD (MONITOR_CRON VARCHAR2(20) );

COMMENT ON COLUMN M_ACTIVEMQ_MONITOR_CONF.MONITOR_CRON IS '监控周期';


CREATE TABLE S_QUARTZ_JOB 
(
  ID VARCHAR2(32) NOT NULL 
, GROUP_CODE VARCHAR2(20) 
, NAME VARCHAR2(20) 
, BEAN_NAME VARCHAR2(100) 
, EXECUTE_METHOD VARCHAR2(100) 
, CRON_EXPRESSION VARCHAR2(20) 
, NEED_REFRESH INT DEFAULT 0 
, CONCURRENT INT DEFAULT 0 
, START_TIME TIMESTAMP 
, END_TIME TIMESTAMP 
, START_NOW INT DEFAULT 0 
, CONSTRAINT S_QUARTZ_JOB_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

ALTER TABLE S_QUARTZ_JOB  
MODIFY (ID DEFAULT sys_guid() );

INSERT INTO "MONITOR"."S_QUARTZ_JOB" (GROUP_CODE, NAME, BEAN_NAME, EXECUTE_METHOD, CRON_EXPRESSION) VALUES ('SYS', 'QUARTZ_RESCHEDULE', 'quartzJobRescheduleTask', 'updateQuartzJob', '0 0/30 * * * ?')
INSERT INTO "MONITOR"."S_QUARTZ_JOB" (GROUP_CODE, NAME, BEAN_NAME, EXECUTE_METHOD, CRON_EXPRESSION, NEED_REFRESH, CONCURRENT, START_NOW) VALUES ('MQ_MONITOR', 'DATA_SYNC', 'mqDataSyncTask', 'updateMqData', '0 0/30 * * * ?', '0', '0', '0')
INSERT INTO "MONITOR"."S_QUARTZ_JOB" (GROUP_CODE, NAME, BEAN_NAME, EXECUTE_METHOD, CRON_EXPRESSION, NEED_REFRESH, CONCURRENT, START_NOW) VALUES ('MQ_MONITOR', 'MESSAGE_MONITOR', 'mqMonitorTask', 'monitor', '0 0/30 * * * ?', '0', '0', '0')
